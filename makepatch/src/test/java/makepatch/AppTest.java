/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package makepatch;

import com.melody.makepatch.Main;
import com.melody.makepatch.Main1;
import com.melody.makepatch.Main2;
import com.melody.makepatch.bean.BlockMapKey;
import org.junit.Test;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;

public class AppTest {
    @Test public void makepatch() {
        String[] args = new String[3];
//        args[1] = "../assets/pdf/source.pdf";
//        args[2] = "../assets/pdf/target.pdf";
        args[1] = "../assets/source.apk";
        args[2] = "../assets/target.apk";
//        args[1] = "../assets/source";
//        args[2] = "../assets/target";
        Main1.main(args);
    }

    @Test public void makepatch2() {
        String[] args = new String[3];
//        args[1] = "../assets/pdf/source.pdf";
//        args[2] = "../assets/pdf/target.pdf";
        String pathFix = "../../";
        args[1] = pathFix + "../assets/source.apk";
        args[2] = pathFix + "../assets/target.apk";
//        args[1] = "../assets/source";
//        args[2] = "../assets/target";
        Main2.main(args);
    }

    @Test public void makepatchOld() {
        String[] args = new String[3];
        args[1] = "../assets/pdf/source.pdf";
        args[2] = "../assets/pdf/target.pdf";
        Main.main0(args);
    }

    @Test public void compareTwoFile()
    {
        FileInputStream origin;
        FileInputStream result;
        try {
//            origin = new FileInputStream("../assets/pdf/target.pdf");
//            result = new FileInputStream("../assets/pdf/target.pdf.patch.target");
            origin = new FileInputStream("../assets/target.apk");
            result = new FileInputStream("../assets/target.apk.patch.target");
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        }

        int readPosition = 0;
        int originLength = 0;
        try {
            originLength = origin.available();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        while (readPosition < originLength)
        {
            try {
                if (origin.read() != result.read())
                {
                    System.out.print("file different in position:"+readPosition);
                    break;
                }
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
            readPosition++;
        }
        System.out.print("compare end:"+readPosition);
    }

    @Test public void currentpath()
    {

        System.out.println(new File("/").getAbsolutePath());
    }

    @Test public void memoryUse()
    {

        BlockMapKey key = null;
        long totalMemory = Runtime.getRuntime().totalMemory();
        key = new BlockMapKey(1,1,1);
        long increase = Runtime.getRuntime().totalMemory() - totalMemory;
        InstrumentationAgent.printObjectSize(key);
    }
}
